swagger: "2.0"
info:
  description: "Here will be more information usefull for front-end developers"
  version: "0.0.1 ALPHA"
  title: "RPG API"
  contact:
    email: "jurasz.do@gmail.com"
host: "localhost"
basePath: "/"
tags:
- name: "professions"
  description: "Everything about professions"
- name: "skillsId"
  description: "Everything about skillsId"
- name: "abilitiesId"
  description: "everything about abilitiesId"
- name: "items"
  description: "everything about items (not weapons or armors)"
- name: "weapons"
  description: "everything about weapons"
- name: "armors"
  description: "everything about armors"
- name: "professions"
  description: "everything about professions"
- name: "characters"
  description: "everything about characters"
- name: "creatures"
  description: "everything about creatures (minotaurs etc)"
- name: "spells"
  description: "everything about spells (not rituals!)"
- name: "mutations"
  description: "everything about mutations"
- name: "rools"
  description: "Did you roll but GM haven't time for you? Your welcome here!"
schemes:
- "http"
paths:
  /skills:
    post:
      tags:
      - "skillsId"
      summary: "Create new skill"
      operationId: "newSkill"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Body required skill object"
        required: true
        schema:
          $ref: '#/definitions/CreateSkill'
      responses:
        200:
          description: "Successed created skill"
        422:
          description: "Invalid parameter exception"
        500:
          description: "Server unexpected error"
    put:
      tags:
      - "skillsId"
      summary: "Update skill by id in body"
      operationId: "updateSkill"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Body required skill object"
        required: true
        schema:
          $ref: '#/definitions/UpdateSkill'
      responses:
        200:
          description: "Successed updated skill"
        404:
          description: "Skill not found"
        422:
          description: "Invalid parameter exception"
        500:
          description: "Server unexpected error"
    get:
      tags:
      - "skillsId"
      summary: "Get all skillsId"
      operationId: "getSkillsId"
      produces:
      - "application/json"
      responses:
        200:
          description: "Succeed operation"
          schema:
            type: "array"
            items:
              $ref: '#/definitions/SkillResponse'
        204:
          description: "Succeed operation but empty response"
  /skills/{id}:
    get:
      tags:
      - skillsId
      summary: "Get skill by id"
      operationId: "getSkillById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of skill mapToDbAbility return"
        required: true
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: '#/definitions/SkillResponse'
        404:
          description: "Skill not found"
    delete:
      tags:
      - skillsId
      summary: "Delete skill by id"
      operationId: "deleteSkillById"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of skill mapToDbAbility return"
        required: true
        type: "string"
      responses:
        200:
          description: "Skill deleted"
        404:
          description: "Skill not found"
        500:
          description: "Unexpected server error"
  /mutations:
    post:
      tags:
      - "mutations"
      summary: "Create new mutation"
      operationId: "newMutation"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Body required mutation object"
        required: true
        schema:
          $ref: '#/definitions/CreateMutation'
      responses:
        200:
          description: "Successed created mutation"
        422:
          description: "Invalid parameter exception"
        500:
          description: "Server unexpected error"
    put:
      tags:
      - "mutations"
      summary: "Update mutation by id in body"
      operationId: "updateMutation"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Body required mutation object"
        required: true
        schema:
          $ref: '#/definitions/UpdateMutation'
      responses:
        200:
          description: "Successed updated mutation"
        404:
          description: "Mutation not found"
        422:
          description: "Invalid parameter exception"
        500:
          description: "Server unexpected error"
    get:
      tags:
      - "mutations"
      summary: "Get all mutations"
      operationId: "getMutations"
      produces:
      - "application/json"
      responses:
        200:
          description: "Succeed operation"
          schema:
            type: "array"
            items:
              $ref: '#/definitions/MutationDto'
        204:
          description: "Succeed operation but empty response"
  /mutations/{id}:
    get:
      tags:
      - mutations
      summary: "Get mutation by id"
      operationId: "getMutationById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of mutation"
        required: true
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: '#/definitions/MutationDto'
        404:
          description: "Mutation not found"
    delete:
      tags:
      - mutations
      summary: "Delete mutation by id"
      operationId: "deleteMutationById"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of mutation"
        required: true
        type: "string"
      responses:
        200:
          description: "Mutation deleted"
        404:
          description: "Mutation not found"
        500:
          description: "Unexpected server error"
  /spells:
    post:
      tags:
      - "spells"
      summary: "Create new spell"
      operationId: "newSpell"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Body required spell object"
        required: true
        schema:
          $ref: '#/definitions/CreateSpell'
      responses:
        200:
          description: "Successed created spell"
        422:
          description: "Invalid parameter exception"
        500:
          description: "Server unexpected error"
    put:
      tags:
      - "spells"
      summary: "Update spell by id in body"
      operationId: "updateSpell"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Body required spell object"
        required: true
        schema:
          $ref: '#/definitions/UpdateSpell'
      responses:
        200:
          description: "Successed updated spell"
        404:
          description: "Spell not found"
        422:
          description: "Invalid parameter exception"
        500:
          description: "Server unexpected error"
    get:
      tags:
      - "spells"
      summary: "Get all spells"
      operationId: "getSpells"
      produces:
      - "application/json"
      responses:
        200:
          description: "Succeed operation"
          schema:
            type: "array"
            items:
              $ref: '#/definitions/SpellResponse'
        204:
          description: "Succeed operation but empty response"
  /spells/{id}:
    get:
      tags:
      - spells
      summary: "Get spell by id"
      operationId: "getSleppById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of spell"
        required: true
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: '#/definitions/SpellResponse'
        404:
          description: "Spell not found"
    delete:
      tags:
      - spells
      summary: "Delete spell by id"
      operationId: "deleteSpellById"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of spell"
        required: true
        type: "string"
      responses:
        200:
          description: "Spell deleted"
        404:
          description: "Spell not found"
        500:
          description: "Unexpected server error"
  /creatures:
    post:
      tags:
      - "creatures"
      summary: "Create new creature"
      operationId: "newCreature"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Body required creature object"
        required: true
        schema:
          $ref: '#/definitions/CreateCreature'
      responses:
        200:
          description: "Successed created creature"
        422:
          description: "Invalid parameter exception"
        500:
          description: "Server unexpected error"
    put:
      tags:
      - "creatures"
      summary: "Update creature by id in body"
      operationId: "updateCreature"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Body required creature object"
        required: true
        schema:
          $ref: '#/definitions/UpdateCreature'
      responses:
        200:
          description: "Successed updated craeture"
        404:
          description: "Creature not found"
        422:
          description: "Invalid parameter exception"
        500:
          description: "Server unexpected error"
    get:
      tags:
      - "creatures"
      summary: "Get all creatures"
      operationId: "getCreatures"
      produces:
      - "application/json"
      responses:
        200:
          description: "Succeed operation"
          schema:
            type: "array"
            items:
              $ref: '#/definitions/CreatureResponse'
        204:
          description: "Succeed operation but empty response"
  /creatures/{id}:
    get:
      tags:
      - creatures
      summary: "Get creature by id"
      operationId: "getCreatureById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of creature"
        required: true
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: '#/definitions/CreatureResponse'
        404:
          description: "Creature not found"
    delete:
      tags:
      - creatures
      summary: "Delete creature by id"
      operationId: "deleteCreatureById"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of creature"
        required: true
        type: "string"
      responses:
        200:
          description: "Creature deleted"
        404:
          description: "Creature not found"
        500:
          description: "Unexpected server error"
  /abilities:
    post:
      tags:
      - "abilitiesId"
      summary: "Create new ability"
      operationId: "newAbility"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Body required ability object"
        required: true
        schema:
          $ref: '#/definitions/CreateAbility'
      responses:
        200:
          description: "Successed created ability"
        422:
          description: "Invalid parameter exception"
        500:
          description: "Server unexpected error"
    put:
      tags:
      - "abilitiesId"
      summary: "Update ability by id in body"
      operationId: "updateAbility"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Body required ability object"
        required: true
        schema:
          $ref: '#/definitions/UpdateAbility'
      responses:
        200:
          description: "Successed updated ability"
        404:
          description: "Ability not found"
        422:
          description: "Invalid parameter exception"
        500:
          description: "Server unexpected error"
    get:
      tags:
      - "abilitiesId"
      summary: "Get all abilitiesId"
      operationId: "getAbilitiesId"
      produces:
      - "application/json"
      responses:
        200:
          description: "Succeed operation"
          schema:
            type: "array"
            items:
              $ref: '#/definitions/AbilityResponse'
        204:
          description: "Succeed operation but empty response"
  /abilities/{id}:
    get:
      tags:
      - "abilitiesId"
      summary: "Get ability by id"
      operationId: "getAbilityById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of ability mapToDbAbility return"
        required: true
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: '#/definitions/AbilityResponse'
        404:
          description: "Ability not found"
    delete:
      tags:
      - "abilitiesId"
      summary: "Delete ability by id"
      operationId: "deleteAbilityById"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of ability mapToDbAbility return"
        required: true
        type: "string"
      responses:
        200:
          description: "Ability deleted"
        404:
          description: "Ability not found"
        500:
          description: "Unexpected server error"
  /items:
    post:
      tags:
      - "items"
      summary: "Create new item"
      operationId: "newItem"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Body required item object"
        required: true
        schema:
          $ref: '#/definitions/CreateItem'
      responses:
        200:
          description: "Successed created item"
        422:
          description: "Invalid parameter exception"
        500:
          description: "Server unexpected error"
    put:
      tags:
      - "items"
      summary: "Update item by id in body"
      operationId: "updateItem"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Body required item object"
        required: true
        schema:
          $ref: '#/definitions/UpdateItem'
      responses:
        200:
          description: "Successed updated item"
        404:
          description: "Item not found"
        422:
          description: "Invalid parameter exception"
        500:
          description: "Server unexpected error"
    get:
      tags:
      - "items"
      summary: "Get all items"
      operationId: "getItems"
      produces:
      - "application/json"
      responses:
        200:
          description: "Succeed operation"
          schema:
            type: "array"
            items:
              $ref: '#/definitions/ItemResponse'
        204:
          description: "Succeed operation but empty response"
  /items/{id}:
    get:
      tags:
      - "items"
      summary: "Get item by id"
      operationId: "getItemById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of item mapToDbAbility return"
        required: true
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: '#/definitions/ItemResponse'
        404:
          description: "Item not found"
    delete:
      tags:
      - "items"
      summary: "Delete item by id"
      operationId: "deleteItemById"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of item mapToDbAbility return"
        required: true
        type: "string"
      responses:
        200:
          description: "Item deleted"
        404:
          description: "Item not found"
        500:
          description: "Unexpected server error"
  /armors:
    post:
      tags:
      - "armors"
      summary: "Create new armor"
      operationId: "newArmor"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Body required armor object"
        required: true
        schema:
          $ref: '#/definitions/CreateArmor'
      responses:
        200:
          description: "Successed created armor"
        422:
          description: "Invalid parameter exception"
        500:
          description: "Server unexpected error"
    put:
      tags:
      - "armors"
      summary: "Update armor by id in body"
      operationId: "updateArmor"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Body required armor object"
        required: true
        schema:
          $ref: '#/definitions/UpdateArmor'
      responses:
        200:
          description: "Successed updated armor"
        404:
          description: "Armor not found"
        422:
          description: "Invalid parameter exception"
        500:
          description: "Server unexpected error"
    get:
      tags:
      - "armors"
      summary: "Get all armors"
      operationId: "getArmors"
      produces:
      - "application/json"
      responses:
        200:
          description: "Succeed operation"
          schema:
            type: "array"
            items:
              $ref: '#/definitions/ArmorResponse'
        204:
          description: "Succeed operation but empty response"
  /armors/{id}:
    get:
      tags:
      - "armors"
      summary: "Get armor by id"
      operationId: "getArmorById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of armor mapToDbAbility return"
        required: true
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: '#/definitions/ArmorResponse'
        404:
          description: "Armor not found"
    delete:
      tags:
      - "armors"
      summary: "Delete armor by id"
      operationId: "deleteArmorById"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of armor mapToDbAbility delete"
        required: true
        type: "string"
      responses:
        200:
          description: "Armor deleted"
        404:
          description: "Armor not found"
        500:
          description: "Unexpected server error"
  /weapons:
    post:
      tags:
      - "weapons"
      summary: "Create new weapon"
      operationId: "newWeapon"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Body required weapon object"
        required: true
        schema:
          $ref: '#/definitions/CreateWeapon'
      responses:
        200:
          description: "Successed created weapon"
        422:
          description: "Invalid parameter exception"
        500:
          description: "Server unexpected error"
    put:
      tags:
      - "weapons"
      summary: "Update weapon by id in body"
      operationId: "updateWeapon"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Body required weapon object"
        required: true
        schema:
          $ref: '#/definitions/UpdateWeapon'
      responses:
        200:
          description: "Successed updated weapon"
        404:
          description: "Weapon not found"
        422:
          description: "Invalid parameter exception"
        500:
          description: "Server unexpected error"
    get:
      tags:
      - "weapons"
      summary: "Get all weapons"
      operationId: "getWeapons"
      produces:
      - "application/json"
      responses:
        200:
          description: "Succeed operation"
          schema:
            type: "array"
            items:
              $ref: '#/definitions/WeaponResponse'
        204:
          description: "Succeed operation but empty response"
  /weapons/{id}:
    get:
      tags:
      - "weapons"
      summary: "Get weapon by id"
      operationId: "getWeaponById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of weapon mapToDbAbility return"
        required: true
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: '#/definitions/WeaponResponse'
        404:
          description: "Weapon not found"
    delete:
      tags:
      - "weapons"
      summary: "Delete weapon by id"
      operationId: "deleteWeaponById"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of weapon mapToDbAbility delete"
        required: true
        type: "string"
      responses:
        200:
          description: "Weapon deleted"
        404:
          description: "Weapon not found"
        500:
          description: "Unexpected server error"
  /professions:
    post:
      tags:
      - "professions"
      summary: "Create new professions"
      operationId: "newProfession"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Body required professions object"
        required: true
        schema:
          $ref: '#/definitions/CreateProfession'
      responses:
        200:
          description: "Successed created professions"
        422:
          description: "Invalid parameter exception"
        500:
          description: "Server unexpected error"
    put:
      tags:
      - "professions"
      summary: "Update professions by id in body"
      operationId: "updateProfession"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Body required professions object"
        required: true
        schema:
          $ref: '#/definitions/UpdateProfession'
      responses:
        200:
          description: "Successed updated professions"
        404:
          description: "Profession not found"
        422:
          description: "Invalid parameter exception"
        500:
          description: "Server unexpected error"
    get:
      tags:
      - "professions"
      summary: "Get all professions"
      operationId: "getProfession"
      produces:
      - "application/json"
      responses:
        200:
          description: "Succeed operation"
          schema:
            type: "array"
            items:
              $ref: '#/definitions/ProfessionResponse'
        204:
          description: "Succeed operation but empty response"
  /profession/{id}:
    get:
      tags:
      - "professions"
      summary: "Get professions by id"
      operationId: "getProfessionById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of professions mapToDbAbility return"
        required: true
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: '#/definitions/ProfessionResponse'
        404:
          description: "Profession not found"
    delete:
      tags:
      - "professions"
      summary: "Delete professions by id"
      operationId: "deleteProfessionById"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of professions mapToDbAbility delete"
        required: true
        type: "string"
      responses:
        200:
          description: "Profession deleted"
        404:
          description: "Profession not found"
        500:
          description: "Unexpected server error"
  /characters:
    post:
      tags:
      - "characters"
      summary: "Create new character"
      operationId: "newCharacter"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Body required character object"
        required: true
        schema:
          $ref: '#/definitions/CreateCharacter'
      responses:
        200:
          description: "Successed created character"
        422:
          description: "Invalid parameter exception"
        500:
          description: "Server unexpected error"
    get:
      tags:
      - "characters"
      summary: "Get all characters"
      operationId: "getCharacters"
      produces:
      - "application/json"
      responses:
        200:
          description: "Succeed operation"
          schema:
            type: "array"
            items:
              $ref: '#/definitions/CharacterResponse'
        204:
          description: "Succeed operation but empty response"
  /characters/{id}:
    get:
      tags:
      - "characters"
      summary: "Get character by id"
      operationId: "getCharacterById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of character mapToDbAbility return"
        required: true
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: '#/definitions/CharacterResponse'
        404:
          description: "Character not found"
    patch:
      tags: ["characters"]
      summary: "Update character by id"
      description: "updateCharacterById"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of character mapToDbAbility update"
        required: true
        type: "string"
      - name: "JsonPatch"
        in: "body"
        required: true
        schema:
          $ref: '#/definitions/UpdateCharacter'
      responses:
        200:
          description: "Updated character"
        404:
          description: "Character not found"
        422:
          description: "Invalid parameters"
        500:
          description: "Unexpected server error"
    delete:
      tags:
      - "characters"
      summary: "Delete character by id"
      operationId: "deleteCharacterById"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of character mapToDbAbility delete"
        required: true
        type: "string"
      responses:
        200:
          description: "Chacracter deleted"
        404:
          description: "Chacracter not found"
        500:
          description: "Unexpected server error"
  /roll/trait:
    post:
      tags:
      - "rools"
      summary: "Find trait value by roll"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Body required trait roll object"
        required: true
        schema:
          $ref: '#/definitions/TraitRoll'
      responses:
        200:
          description: "Successed roll"
          schema:
            type: "number"
            example: 1
        422:
          description: "Invalid parameter exception"
        500:
          description: "Server unexpected error"
  /roll/profession:
    post:
      tags:
      - "rools"
      summary: "Find professions value by roll"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Body required professions roll object"
        required: true
        schema:
          $ref: '#/definitions/ProfessionRoll'
      responses:
        200:
          description: "Successed roll"
          schema:
            $ref: '#/definitions/ProfessionResponse'
        422:
          description: "Invalid parameter exception"
        500:
          description: "Server unexpected error"
  /roll/abilities:
    post:
      tags:
      - "rools"
      summary: "Find ability by roll"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Body required ability roll object"
        required: true
        schema:
          $ref: '#/definitions/AbilityRoll'
      responses:
        200:
          description: "Successed roll"
          schema:
            $ref: '#/definitions/AbilityResponse'
        422:
          description: "Invalid parameter exception"
        500:
          description: "Server unexpected error"
definitions:
  CreateSkill:
    type: "object"
    required:
    - name
    - trait
    - type
    properties:
      name:
        type: "string"
      description:
        type: "string"
      trait:
        $ref: '#/definitions/TraitsEnum'
      type:
        type: "string"
        enum:
        - BASIC
        - ADVANCE
  UpdateSkill:
    type: "object"
    required:
    - id
    - description
    - name
    - trait
    - type
    properties:
      id:
        type: "string"
      name:
        type: "string"
      description:
        type: "string"
      trait:
        $ref: '#/definitions/TraitsEnum'
      type:
        type: "string"
        enum:
        - BASIC
        - ADVANCE
  SkillResponse:
    type: "object"
    properties:
      id:
        type: "string"
      name:
        type: "string"
      description:
        type: "string"
      trait:
        $ref: '#/definitions/TraitsEnum'
      type:
        type: "string"
        enum:
        - BASIC
        - ADVANCE
  CreateAbility:
    type: "object"
    required:
    - name
    - description
    properties:
      name:
        type: "string"
      description:
        type: "string"
  UpdateAbility:
    type: "object"
    required:
    - id
    - description
    - name
    properties:
      id:
        type: "string"
      name:
        type: "string"
      description:
        type: "string"
  AbilityResponse:
    type: "object"
    properties:
      id:
        type: "string"
      name:
        type: "string"
      description:
        type: "string"
  CreateItem:
    type: "object"
    required:
    - name
    - description
    properties:
      name:
        type: "string"
      price:
        $ref: '#/definitions/Price'
      description:
        type: "string"
      availability:
        $ref: '#/definitions/Availability'
  UpdateItem:
    type: "object"
    required: [id, name, price, description, availability]
    properties:
      id:
        type: "string"
      name:
        type: "string"
      price:
        $ref: '#/definitions/Price'
      description:
        type: "string"
      availability:
        $ref: '#/definitions/Availability'
  ItemResponse:
    type: "object"
    properties:
      id:
        type: "string"
      name:
        type: "string"
      price:
        $ref: '#/definitions/Price'
      description:
        type: "string"
      availability:
        $ref: '#/definitions/Availability'
  CreateArmor:
    type: "object"
    required:
    - name
    - type
    - protectionAreas
    - pz
    properties:
      name:
        type: "string"
      type:
        $ref: '#/definitions/ArmorType'
      price:
        $ref: '#/definitions/Price'
      protectionAreas:
        type: "array"
        items:
          $ref: '#/definitions/ProtectionArea'
      pz:
        type: "integer"
      description:
        type: "string"
      weight:
        type: "number"
      url:
        type: "string"
      availability:
        $ref: '#/definitions/Availability'
  UpdateArmor:
    type: "object"
    required:
    - id
    - price
    - description
    - availability
    - name
    - type
    - weight
    - url
    - protectionAreas
    - pz
    properties:
      id:
        type: "string"
      name:
        type: "string"
      type:
        $ref: '#/definitions/ArmorType'
      price:
        $ref: '#/definitions/Price'
      protectionAreas:
        type: "array"
        items:
          $ref: '#/definitions/ProtectionArea'
      pz:
        type: "integer"
      description:
        type: "string"
      weight:
        type: "number"
      url:
        type: "string"
      availability:
        $ref: '#/definitions/Availability'
  ArmorResponse:
    type: "object"
    properties:
      id:
        type: "string"
      name:
        type: "string"
      type:
        $ref: '#/definitions/ArmorType'
      price:
        $ref: '#/definitions/Price'
      protectionAreas:
        type: "array"
        items:
          $ref: '#/definitions/ProtectionArea'
      pz:
        type: "integer"
      description:
        type: "string"
      weight:
        type: "number"
      url:
        type: "string"
      availability:
        $ref: '#/definitions/Availability'
  CreateWeapon:
    type: "object"
    required: [name, type, category, power, weaponTraits]
    properties:
      name:
        type: "string"
      type:
        $ref: '#/definitions/WeaponType'
      category:
        $ref: '#/definitions/WeaponCategory'
      power:
        type: "string"
        example: "S+1"
      weaponTraits:
        type: "array"
        items:
          type: "string"
      description:
        type: "string"
      price:
        $ref: '#/definitions/Price'
      weight:
        type: "integer"
      availability:
        $ref: '#/definitions/Availability'
      range:
        description: "In meters. Only apply on weapon type: 'ranged'"
        required: ["WEAPON_TYPE: RANGED"]
        type: "number"
      reloadTime:
        description: "Only apply on weapon type: 'ranged'"
        required: ["WEAPON_TYPE: RANGED"]
        type: "string"
  UpdateWeapon:
    type: "object"
    required: [id, name, type, category, power, weaponTraits, description, price, weight, availability, range, reloadTime]
    properties:
      id:
        type: "string"
      name:
        type: "string"
      type:
        $ref: '#/definitions/WeaponType'
      category:
        $ref: '#/definitions/WeaponCategory'
      power:
        type: "string"
        example: "S+1"
      weaponTraits:
        type: "string"
      description:
        type: "string"
      price:
        $ref: '#/definitions/Price'
      weight:
        type: "integer"
      availability:
        $ref: '#/definitions/Availability'
      range:
        description: "In meters. Only apply on weapon type: 'ranged'"
        required: ["WEAPON_TYPE: RANGED"]
        type: "string"
      reloadTime:
        description: "Only apply on weapon type: 'ranged'"
        required: ["WEAPON_TYPE: RANGED"]
        type: "number"
  WeaponResponse:
    type: "object"
    properties:
      id:
        type: "string"
      name:
        type: "string"
      type:
        $ref: '#/definitions/WeaponType'
      category:
        $ref: '#/definitions/WeaponCategory'
      power:
        type: "string"
        example: "S+1"
      weaponTraits:
        type: "string"
      description:
        type: "string"
      price:
        $ref: '#/definitions/Price'
      weight:
        type: "integer"
      availability:
        $ref: '#/definitions/Availability'
      range:
        description: "In meters. Only apply on weapon type: 'ranged'"
        required: ["WEAPON_TYPE: RANGED"]
        type: "number"
      reloadTime:
        description: "Only apply on weapon type: 'ranged'"
        required: ["WEAPON_TYPE: RANGED"]
        type: "string"
  CreateProfession:
    type: "object"
    required: [name, skillsId, abilitiesId]
    properties:
      name:
        type: "string"
      skills:
        description: "List of skillsId id"
        type: "array"
        items:
          type: "string"
      optionalSkills:
        type: "array"
        items:
          $ref: '#/definitions/OptionalSkill'
      abilities:
        description: "List of abilitiesId id"
        type: "array"
        items:
          type: "string"
      items:
        description: "List of items id"
        type: "array"
        items:
          type: "string"
      preProfession:
        description: "List of professions id which will precede it"
        type: "array"
        items:
          type: "string"
      postProfession:
        description: "List of professions id which will extend it"
        type: "array"
        items:
          type: "string"
      traits:
        type: "array"
        items:
          $ref: '#/definitions/TraitWithValue'
      description:
        type: "string"
      url:
        type: "string"
  UpdateProfession:
    type: "object"
    required: [name, skillsId,optionalSkills, abilitiesId, items, preProfession, postProfession, traits, description, url, id]
    properties:
      name:
        type: "string"
      skills:
        description: "List of skillsId id"
        type: "array"
        items:
          type: "string"
      optionalSkills:
        type: "array"
        items:
          $ref: '#/definitions/OptionalSkill'
      abilities:
        description: "List of abilitiesId id"
        type: "array"
        items:
          type: "string"
      items:
        description: "List of items id"
        type: "array"
        items:
          type: "string"
      preProfession:
        description: "List of professions id which will precede it"
        type: "array"
        items:
          type: "string"
      postProfession:
        description: "List of professions id which will extend it"
        type: "array"
        items:
          type: "string"
      traits:
        type: "array"
        items:
          $ref: '#/definitions/TraitWithValue'
      description:
        type: "string"
      url:
        type: "string"
      id:
        type: "string"
  ProfessionResponse:
    type: "object"
    properties:
      name:
        type: "string"
      skills:
        description: "List of skillsId id"
        type: "array"
        items:
          $ref: '#/definitions/SkillResponse'
      optionalSkills:
        type: "array"
        items:
          $ref: '#/definitions/OptionalSkillResponse'
      abilities:
        description: "List of abilitiesId id"
        type: "array"
        items:
          $ref: '#/definitions/AbilityResponse'
      items:
        description: "List of items id"
        type: "array"
        items:
          $ref: '#/definitions/ItemResponse'
      preProfession:
        type: "array"
        items:
          $ref: '#/definitions/BasicProfessionResponse'
      postProfession:
        type: "array"
        items:
          $ref: '#/definitions/BasicProfessionResponse'
      traits:
        type: "array"
        items:
          $ref: '#/definitions/TraitWithValue'
      description:
        type: "string"
      url:
        type: "string"
  CreateCharacter:
    type: "object"
    required: [name, raceId, professionId, age, sex, traitsId, skillsId, abilitiesId]
    properties:
      name:
        type: "string"
      raceId:
        type: "string"
      professionId:
        type: "string"
      age:
        type: "number"
      sex:
        type: "string"
        enum: [MALE, FEMALE, OTHER]
      traitsId:
        type: "array"
        items:
          type: "string"
      skillsId:
        type: "array"
        items:
          type: "string"
      abilitiesId:
        type: "array"
        items:
          type: "string"
      preProfessionId:
        type: "string"
      eyeColor:
        type: "string"
      weight:
        type: "number"
      hairColor:
        type: "string"
      height:
        type: "string"
      star:
        type: "string"
      experience:
        type: "number"
      activeExperience:
        type: "number"
      armorsId:
        type: "array"
        items:
          type: "string"
      weaponsId:
        type: "array"
        items:
          type: "string"
      ItemsId:
        type: "array"
        items:
          type: "string"
      money:
        type: "number"
  UpdateCharacter:
    type: "object"
    properties:
      name:
        type: "string"
      raceId:
        type: "string"
      professionId:
        type: "string"
      age:
        type: "number"
      sex:
        type: "string"
        enum: [MALE, FEMALE, OTHER]
      traitsId:
        type: "array"
        items:
          type: "string"
      skillsId:
        type: "array"
        items:
          type: "string"
      abilitiesId:
        type: "array"
        items:
          type: "string"
      preProfessionId:
        type: "string"
      eyeColor:
        type: "string"
      weight:
        type: "number"
      hairColor:
        type: "string"
      height:
        type: "string"
      star:
        type: "string"
      experience:
        type: "number"
      activeExperience:
        type: "number"
      armorsId:
        type: "array"
        items:
          type: "string"
      weaponsId:
        type: "array"
        items:
          type: "string"
      ItemsId:
        type: "array"
        items:
          type: "string"
      money:
        type: "number"
  CharacterResponse:
    type: "object"
    properties:
      id:
        type: "string"
      name:
        type: "string" #TODO Race should be ref
      raceId:
        type: "string"
      profession:
        $ref: '#/definitions/ProfessionResponse'
      age:
        type: "number"
      sex:
        type: "string"
        enum: [MALE, FEMALE, OTHER]
      traits:
        type: "array"
        items:
          $ref: '#/definitions/CharacterTrait'
      skills:
        type: "array"
        items:
          $ref: '#/definitions/SkillResponse'
      abilities:
        type: "array"
        items:
          $ref: '#/definitions/AbilityResponse'
      preProfession:
        $ref: '#/definitions/ProfessionResponse'
      eyeColor:
        type: "string"
      weight:
        type: "number"
      hairColor:
        type: "string"
      height:
        type: "string"
      star:
        type: "string"
      experience:
        type: "number"
      activeExperience:
        type: "number"
      armors:
        type: "array"
        items:
          $ref: '#/definitions/ArmorResponse'
      armorPoints:
        $ref: '#/definitions/ArmorPoints'
      weapons:
        type: "array"
        items:
          $ref: '#/definitions/WeaponResponse'
      Items:
        type: "array"
        items:
          $ref: '#/definitions/ItemResponse'
      money:
        type: "number"
  CreateCreature:
    type: "object"
    required: [name, type, traits, skillsId, abilitiesId]
    properties:
      name:
        type: "string"
      type:
        $ref: '#/definitions/CreatureType'
      traits:
        type: "array"
        items:
          $ref: '#/definitions/TraitValueDto'
      skillsId:
        type: "array"
        items:
          type: "string"
      abilitiesId:
        type: "array"
        items:
          type: "string"
      description:
        type: "string"
      imageName:
        type: "string"
      specialRules:
        type: "string"
      armorsId:
        type: "array"
        items:
          type: "string"
      weaponsId:
        type: "array"
        items:
          type: "string"
      itemsId:
        type: "array"
        items:
          type: "string"
  UpdateCreature:
    type: "object"
    required: [id, name, type, traits, skillsId, abilitiesId, imageName, description, specialRules, armorsId, weaponsId, itemsId]
    properties:
      id:
        type: "string"
      name:
        type: "string"
      type:
        $ref: '#/definitions/CreatureType'
      traits:
        type: "array"
        items:
          $ref: '#/definitions/TraitValueDto'
      skillsId:
        type: "array"
        items:
          type: "string"
      abilitiesId:
        type: "array"
        items:
          type: "string"
      description:
        type: "string"
      imageName:
        type: "string"
      specialRules:
        type: "string"
      armorsId:
        type: "array"
        items:
          type: "string"
      weaponsId:
        type: "array"
        items:
          type: "string"
      itemsId:
        type: "array"
        items:
          type: "string"
  CreatureResponse:
    type: "object"
    properties:
      id:
        type: "string"
      name:
        type: "string"
      type:
        $ref: '#/definitions/CreatureType'
      traits:
        type: "array"
        items:
          $ref: '#/definitions/TraitValueDto'
      skills:
        type: "array"
        items:
          $ref: '#/definitions/SkillResponse'
      abilities:
        type: "array"
        items:
          $ref: '#/definitions/AbilityResponse'
      imageName:
        type: "string"
      description:
        type: "string"
      specialRules:
        type: "string"
      armors:
        type: "array"
        items:
          $ref: '#/definitions/ArmorResponse'
      weapons:
        type: "array"
        items:
          $ref: '#/definitions/WeaponResponse'
      items:
        type: "array"
        items:
          $ref: '#/definitions/ItemResponse'
  CreateSpell:
    type: "object"
    required: [name, powerLevel, castTime, component, description]
    properties:
      name:
        type: "string"
      powerLevel:
        type: "integer"
      castTime:
        type: "string"
      component:
        type: "string"
      description:
        type: "string"
      table:
        type: "array"
        items:
          $ref: '#/definitions/TableValueDto'
      duration:
        type: "string"
  UpdateSpell:
    type: "object"
    required: [name, powerLevel, castTime, component, description, table, duration]
    properties:
      name:
        type: "string"
      powerLevel:
        type: "integer"
      castTime:
        type: "string"
      component:
        type: "string"
      description:
        type: "string"
      table:
        type: "array"
        items:
          $ref: '#/definitions/TableValueDto'
      duration:
        type: "string"
  SpellResponse:
    type: "object"
    properties:
      name:
        type: "string"
      powerLevel:
        type: "integer"
      castTime:
        type: "string"
      component:
        type: "string"
      description:
        type: "string"
      table:
        type: "array"
        items:
          $ref: '#/definitions/TableValueDto'
      duration:
        type: "string"
  CreateMutation:
    type: "object"
    required: [name, type, description, godType, roll, ps]
    properties:
      name:
        type: "string"
      type:
        $ref: '#/definitions/MutationType'
      description:
        type: "string"
      godType:
        $ref: '#/definitions/GodType'
      ps:
        type: "integer"
      roll:
        type: 'string'
      comment:
        type: "string"
      variants:
        type: "string"
      table:
        $ref: '#/definitions/MutationTable'
  UpdateMutation:
    type: "object"
    required: [name, type, description, godType, ps,  table, roll, comment, variants, id]
    properties:
      name:
        type: "string"
      type:
        $ref: '#/definitions/MutationType'
      description:
        type: "string"
      godType:
        $ref: '#/definitions/GodType'
      ps:
        type: "integer"
      roll:
        type: 'string'
      comment:
        type: "string"
      variants:
        type: "string"
      table:
        $ref: '#/definitions/MutationTable'
      id:
        type: "string"
  MutationDto:
    type: "object"
    properties:
      name:
        type: "string"
      type:
        $ref: '#/definitions/MutationType'
      description:
        type: "string"
      godType:
        $ref: '#/definitions/GodType'
      ps:
        type: "integer"
      roll:
        type: 'string'
      comment:
        type: "string"
      variants:
        type: "string"
      table:
        $ref: '#/definitions/MutationTable'
      id:
        type: "string"
  MutationType:
    type: string
    enum: [SINGLE, MULTIPLE]
  MutationTable:
    type: "array"
    items:
      $ref: '#/definitions/Column'
  GodType:
    type: string
    enum: [KHORN, NURGLE, SLAANESH, TZEENTCH, OTHER]
  Column:
    type: "object"
    properties:
      first:
        type: "string"
        description: "Column header"
      second:
        type: array
        items:
          type: "string"
  TraitRoll:
    type: "object"
    required: [name, raceId, roll]
    properties:
      abilityId:
        $ref: '#/definitions/TraitsEnum'
      raceId:
        type: "string"
      roll:
        type: "number"
        maximum: 20
  CreatureType:
    type: "string"
    enum: [MUTANT, ANIMAL, UNDEAD, DEMON, OTHER]
  AbilityRoll:
    type: "object"
    required: [raceId, roll]
    properties:
      raceId:
        type: "string"
      roll:
        type: "number"
        maximum: 100
  ProfessionRoll:
    type: "object"
    required: [raceId, roll]
    properties:
      raceId:
        type: "string"
      roll:
        type: "number"
        maximum: 100
  TraitsEnum:
    type: string
    description: "Value 'other' should be only used in mapToDbAbility operate with skillsId."
    enum:
      - WW
      - US
      - K
      - ODP
      - ZR
      - INT
      - SW
      - ODG
      - A
      - ZYW
      - S
      - WT
      - SZ
      - MAG
      - PO
      - PP
      - OTHER
  ProtectionArea:
    type: "string"
    enum: [HEAD, BODY, LEFT_HAND, RIGHT_HAND, LEFT_LEG, RIGHT_LEG]
  ArmorType:
    type: "string"
    enum: [leather, chain, plate, other]
  ArmorPoints:
    type: "object"
    properties:
      area:
        $ref: '#/definitions/ProtectionArea'
      value:
        type: "number"
  WeaponCategory:
    type: "string"
    enum: [BASIC, TWO_HANDED, CAVALERY, FLAIL, PARRY, FENCING, IMMOBILISATION, LONG_BOW, FIREARM, CROSSBOW, THROWN, MECHANIC, SLING, OTHER]
  WeaponType:
    type: "string"
    enum: [WHITE, RANGED, AMMO, OTHER]
  TraitWithValue:
    type: "object"
    properties:
      traitName:
        $ref: '#/definitions/TraitsEnum'
      traitExtend:
        type: number
  TraitValueDto:
    type: "object"
    properties:
      first:
        type: "string"
        description: "Trait Name (WW, SW, O etc)"
      second:
        type: "number"
        description: "Trait value"
  TableValueDto:
    type: "object"
    properties:
      first:
        type: "string"
        description: "Table first column"
      second:
        type: "string"
        description: "Table second column"
  CharacterTrait:
    type: "object"
    properties:
      traitName:
        $ref: '#/definitions/TraitsEnum'
      baseValue:
        type: "number"
      extendValue:
        type: "number"
      actualValue:
        type: "number"
  BasicProfessionResponse:
    type: "object"
    properties:
      id:
        type: "string"
      name:
        type: "string"
  OptionalSkill:
    type: "object"
    properties:
      firstId:
        type: "string"
      secondId:
        type: "string"
  Availability:
    type: "string"
    enum: [COMMON, RARE, VERY_RARE, SPORADIC, LITTLE]
  Price:
    type: "object"
    properties:
      gold:
        type: "number"
      silver:
        type: "number"
      bronze:
        type: "number"
  OptionalSkillResponse:
    type: "object"
    properties:
      first:
        $ref: '#/definitions/SkillResponse'
      second:
        $ref: '#/definitions/SkillResponse'